/* The following code was generated by JFlex 1.4.3 on 4/04/18 10:09 PM */

package analexico;
import static analexico.Token.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/04/18 10:09 PM from the specification file
 * <tt>C:/Users/Jhensser-/OneDrive - Universidad Mariano GÃ¡lvez/Datos adjuntos/NetBeansProjects/analexico 3/src/analexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\13\2\0\1\14\22\0\1\11\1\10\1\45\1\10\1\10"+
    "\1\0\1\10\1\0\1\51\1\52\1\3\1\4\1\46\1\5\1\0"+
    "\1\6\12\2\1\55\1\56\1\47\1\7\1\50\1\10\1\10\32\1"+
    "\4\0\1\12\1\0\1\15\1\16\1\22\1\34\1\23\1\35\1\40"+
    "\1\31\1\32\1\1\1\27\1\25\1\36\1\26\1\24\1\41\1\1"+
    "\1\21\1\17\1\20\1\33\1\42\1\43\1\37\1\30\1\44\1\53"+
    "\1\0\1\54\43\0\1\10\35\0\1\10\21\0\1\1\37\0\1\1"+
    "\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\4\4\1\5\1\6\1\7"+
    "\1\10\21\2\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\4\0\1\6\1\10\1\27\1\30\30\2\1\31"+
    "\2\2\1\31\12\2\1\0\1\32\1\33\1\34\1\31"+
    "\3\0\27\2\1\31\16\2\1\32\2\0\27\2\1\0"+
    "\6\2\1\31\6\2\1\31\30\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\u011a"+
    "\0\57\0\57\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\u04f5\0\57"+
    "\0\57\0\57\0\57\0\57\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\57\0\57\0\57\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\136\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0497\0\57\0\57\0\57\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u1a70\0\u0ff9\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\12\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\3\1\24\1\25\3\3\1\26"+
    "\1\3\1\27\1\30\1\31\1\3\1\32\1\33\1\34"+
    "\1\35\1\3\1\36\1\12\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\60\0\1\3\1\47\7\0"+
    "\1\47\2\0\30\3\14\0\1\4\57\0\1\50\1\51"+
    "\1\52\1\53\1\54\22\0\1\55\2\0\1\56\1\57"+
    "\4\0\1\60\21\0\1\61\17\0\1\62\37\0\1\63"+
    "\40\0\1\64\21\0\1\62\44\0\1\3\1\47\7\0"+
    "\1\47\2\0\1\3\1\65\1\66\25\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\4\3\1\67\2\3\1\70"+
    "\3\3\1\71\14\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\3\3\1\72\7\3\1\73\1\74\1\3\1\75"+
    "\7\3\1\76\1\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\4\3\1\77\7\3\1\100\13\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\6\3\1\101\21\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\1\102\6\3\1\103"+
    "\1\104\3\3\1\105\13\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\10\3\1\106\1\107\10\3\1\110\5\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\7\3\1\111"+
    "\20\3\13\0\1\3\1\47\7\0\1\47\2\0\1\112"+
    "\5\3\1\113\21\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\11\3\1\114\6\3\1\115\1\116\6\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\6\3\1\117\1\120"+
    "\20\3\13\0\1\3\1\47\7\0\1\47\2\0\7\3"+
    "\1\121\1\122\4\3\1\123\12\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\1\124\27\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\7\3\1\125\20\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\1\126\3\3\1\127\11\3"+
    "\1\130\11\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\7\3\1\131\20\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\14\3\1\132\13\3\13\0\11\133\3\0\30\133"+
    "\1\134\20\0\1\135\40\0\1\136\7\0\2\47\7\0"+
    "\1\47\2\0\30\47\47\0\1\137\45\0\1\140\47\0"+
    "\1\141\72\0\1\142\25\0\13\61\1\0\43\61\1\0"+
    "\1\3\1\47\7\0\1\47\2\0\2\3\1\143\25\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\2\3\1\144"+
    "\25\3\13\0\1\3\1\47\7\0\1\47\2\0\6\3"+
    "\1\145\21\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\7\3\1\146\20\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\3\3\1\147\24\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\1\150\3\3\1\151\23\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\11\3\1\152\16\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\7\3\1\153\20\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\24\3\1\154"+
    "\3\3\13\0\1\3\1\47\7\0\1\47\2\0\15\3"+
    "\1\155\12\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\1\156\12\3\1\115\14\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\4\3\1\157\10\3\1\160\12\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\3\3\1\161\24\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\2\3\1\147"+
    "\1\162\24\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\11\3\1\163\16\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\1\164\27\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\1\121\27\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\2\3\1\147\25\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\16\3\1\165\11\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\3\3\1\166\24\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\11\3\1\167\16\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\3\3\1\170\24\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\26\3\1\115"+
    "\1\3\13\0\1\3\1\47\7\0\1\47\2\0\2\3"+
    "\1\171\1\172\24\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\24\3\1\173\3\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\20\3\1\174\7\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\16\3\1\175\11\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\4\3\1\115\23\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\7\3\1\176\20\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\11\3\1\177"+
    "\16\3\13\0\1\3\1\47\7\0\1\47\2\0\15\3"+
    "\1\200\12\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\3\3\1\201\24\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\5\3\1\202\22\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\7\3\1\203\5\3\1\204\12\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\1\3\1\205\26\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\10\3\1\206"+
    "\4\3\1\207\12\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\15\3\1\210\12\3\13\0\11\133\3\0\30\133"+
    "\1\211\32\0\1\137\67\0\1\212\56\0\1\213\25\0"+
    "\1\3\1\47\7\0\1\47\2\0\3\3\1\214\24\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\6\3\1\153"+
    "\21\3\13\0\1\3\1\47\7\0\1\47\2\0\1\215"+
    "\27\3\13\0\1\3\1\47\7\0\1\47\2\0\10\3"+
    "\1\216\17\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\6\3\1\115\21\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\3\3\1\217\24\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\15\3\1\220\12\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\5\3\1\221\22\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\4\3\1\222\23\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\6\3\1\121\21\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\3\3\1\162"+
    "\24\3\13\0\1\3\1\47\7\0\1\47\2\0\11\3"+
    "\1\223\16\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\7\3\1\224\20\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\2\3\1\115\25\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\16\3\1\225\11\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\5\3\1\226\22\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\2\3\1\222\1\227\24\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\2\3\1\160"+
    "\25\3\13\0\1\3\1\47\7\0\1\47\2\0\21\3"+
    "\1\115\6\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\6\3\1\230\21\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\23\3\1\115\4\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\15\3\1\231\12\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\3\3\1\232\24\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\6\3\1\233\21\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\7\3\1\153\1\234"+
    "\17\3\13\0\1\3\1\47\7\0\1\47\2\0\1\235"+
    "\27\3\13\0\1\3\1\47\7\0\1\47\2\0\1\3"+
    "\1\210\26\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\1\222\27\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\1\236\27\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\11\3\1\115\16\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\7\3\1\115\20\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\12\3\1\237\15\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\3\3\1\240\24\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\25\3\1\241\2\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\10\3\1\217\17\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\1\242\27\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\17\3\1\115"+
    "\10\3\13\0\1\3\1\47\7\0\1\47\2\0\10\3"+
    "\1\147\17\3\57\0\1\211\37\0\1\137\55\0\1\243"+
    "\32\0\1\3\1\47\7\0\1\47\2\0\4\3\1\244"+
    "\23\3\13\0\1\3\1\47\7\0\1\47\2\0\12\3"+
    "\1\115\15\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\6\3\1\245\21\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\15\3\1\246\12\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\5\3\1\247\3\3\1\167\16\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\14\3\1\250\13\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\3\3\1\115"+
    "\24\3\13\0\1\3\1\47\7\0\1\47\2\0\2\3"+
    "\1\251\25\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\26\3\1\252\1\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\4\3\1\200\23\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\14\3\1\115\13\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\15\3\1\253\12\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\11\3\1\254\16\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\25\3\1\147\2\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\1\255\27\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\4\3\1\256"+
    "\23\3\13\0\1\3\1\47\7\0\1\47\2\0\6\3"+
    "\1\257\21\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\16\3\1\260\11\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\10\3\1\261\17\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\1\262\27\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\6\3\1\263\21\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\1\71\27\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\3\3\1\132\24\3\35\0\1\137"+
    "\34\0\1\3\1\47\7\0\1\47\2\0\1\264\27\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\1\200\27\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\5\3\1\115"+
    "\22\3\13\0\1\3\1\47\7\0\1\47\2\0\3\3"+
    "\1\265\24\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\4\3\1\266\23\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\15\3\1\267\12\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\11\3\1\270\16\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\17\3\1\160\10\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\11\3\1\271\16\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\20\3\1\272\7\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\21\3\1\273"+
    "\6\3\13\0\1\3\1\47\7\0\1\47\2\0\10\3"+
    "\1\222\17\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\10\3\1\274\17\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\23\3\1\147\4\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\5\3\1\275\22\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\5\3\1\222\22\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\20\3\1\276\7\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\7\3\1\277\20\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\6\3\1\300"+
    "\21\3\13\0\1\3\1\47\7\0\1\47\2\0\16\3"+
    "\1\147\11\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\5\3\1\301\22\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\1\302\27\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\6\3\1\303\21\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\13\3\1\115\14\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\3\3\1\304\24\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\24\3\1\115\3\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\11\3\1\305\16\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\11\3\1\222"+
    "\16\3\13\0\1\3\1\47\7\0\1\47\2\0\6\3"+
    "\1\306\21\3\13\0\1\3\1\47\7\0\1\47\2\0"+
    "\5\3\1\147\22\3\13\0\1\3\1\47\7\0\1\47"+
    "\2\0\11\3\1\307\16\3\13\0\1\3\1\47\7\0"+
    "\1\47\2\0\6\3\1\207\21\3\13\0\1\3\1\47"+
    "\7\0\1\47\2\0\15\3\1\310\12\3\13\0\1\3"+
    "\1\47\7\0\1\47\2\0\7\3\1\311\20\3\13\0"+
    "\1\3\1\47\7\0\1\47\2\0\3\3\1\160\24\3"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\27\3\1\304"+
    "\13\0\1\3\1\47\7\0\1\47\2\0\20\3\1\115"+
    "\7\3\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\3\11\24\1\7\11"+
    "\1\1\5\11\4\0\1\1\3\11\46\1\1\0\1\1"+
    "\3\11\3\0\47\1\2\0\27\1\1\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return PyComa;
          }
        case 29: break;
        case 24: 
          { return mayorIgualQue;
          }
        case 30: break;
        case 10: 
          { return mayque;
          }
        case 31: break;
        case 19: 
          { return suma;
          }
        case 32: break;
        case 14: 
          { return llaveCie;
          }
        case 33: break;
        case 23: 
          { lexeme=yytext(); return IgualQue;
          }
        case 34: break;
        case 26: 
          { lexeme=yytext(); return Cadena;
          }
        case 35: break;
        case 28: 
          { return diferencia;
          }
        case 36: break;
        case 4: 
          { lexeme=yytext (); return Operador;
          }
        case 37: break;
        case 22: 
          { return igual;
          }
        case 38: break;
        case 12: 
          { return parentesisCie;
          }
        case 39: break;
        case 5: 
          { lexeme=yytext (); return Simbolo;
          }
        case 40: break;
        case 21: 
          { return division;
          }
        case 41: break;
        case 15: 
          { return dospuntos;
          }
        case 42: break;
        case 1: 
          { lexeme=yytext (); return ERROR;
          }
        case 43: break;
        case 8: 
          { lexeme=yytext(); return SaltoDeLinea;
          }
        case 44: break;
        case 18: 
          { return multiplicacion;
          }
        case 45: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 46: break;
        case 13: 
          { return llaveAp;
          }
        case 47: break;
        case 25: 
          { lexeme=yytext (); return PALABRA_RESERVADA;
          }
        case 48: break;
        case 20: 
          { return resta;
          }
        case 49: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 50: break;
        case 11: 
          { return parentesisAp;
          }
        case 51: break;
        case 7: 
          { return guionbaj;
          }
        case 52: break;
        case 9: 
          { return menque;
          }
        case 53: break;
        case 6: 
          { /*Ignore*/
          }
        case 54: break;
        case 27: 
          { return menIgualQue;
          }
        case 55: break;
        case 17: 
          { lexeme=yytext(); return ID;
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
